#云编译公用核心
name: WRT-CORE

on:
  workflow_call:
    inputs:
      WRT_CONFIG:
        required: true
        type: string
      WRT_THEME:
        required: true
        type: string
      WRT_NAME:
        required: true
        type: string
      WRT_SSID:
        required: true
        type: string
      WRT_WORD:
        required: true
        type: string
      WRT_IP:
        required: true
        type: string
      WRT_PW:
        required: true
        type: string
      WRT_REPO:
        required: true
        type: string
      WRT_BRANCH:
        required: true
        type: string
      WRT_SOURCE:
        required: false
        type: string
      WRT_PACKAGE:
        required: false
        type: string
      WRT_TEST:
        required: false
        type: string
      CI_NAME:
        required: false
        type: string
      WRT_ARCH:
        required: false
        type: string
env:
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  WRT_CONFIG: ${{inputs.WRT_CONFIG}}
  WRT_THEME: ${{inputs.WRT_THEME}}
  WRT_NAME: ${{inputs.WRT_NAME}}
  WRT_SSID: ${{inputs.WRT_SSID}}
  WRT_WORD: ${{inputs.WRT_WORD}}
  WRT_IP: ${{inputs.WRT_IP}}
  WRT_PW: ${{inputs.WRT_PW}}
  WRT_REPO: ${{inputs.WRT_REPO}}
  WRT_BRANCH: ${{inputs.WRT_BRANCH}}
  WRT_PACKAGE: ${{inputs.WRT_PACKAGE}}
  WRT_TEST: ${{inputs.WRT_TEST}}
  WRT_DIR: 'wrt'
  CI_NAME: ${{inputs.CI_NAME}}
  WRT_ARCH: ${{inputs.WRT_ARCH}}

jobs:
  core:
    name: ${{inputs.WRT_SOURCE}}
    runs-on: ubuntu-22.04
    steps:
      - name: Install BC
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt -yqq install bc

      - name: Free Disk Space
        uses: endersonmenezes/free-disk-space@v2
        with:
          remove_android: true
          remove_dotnet: true
          remove_haskell: true
          remove_tool_cache: true
          remove_swap: true
          remove_packages: "azure-cli google-cloud-cli microsoft-edge-stable google-chrome-stable firefox postgresql* temurin-* *llvm* mysql* dotnet-sdk-*"
          remove_packages_one_command: true
          remove_folders: "/usr/share/swift /usr/share/miniconda /usr/share/az* /usr/share/glade* /usr/local/share/chromium /usr/local/share/powershell"
          testing: false

      - name: Checkout Projects
        uses: actions/checkout@main
      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt -yqq purge firefox
          sudo -E apt -yqq update
          sudo -E apt -yqq full-upgrade
          sudo -E apt -yqq autoremove --purge
          sudo -E apt -yqq autoclean
          sudo -E apt -yqq clean
          sudo -E apt -yqq install dos2unix libfuse-dev
          sudo bash $GITHUB_WORKSPACE/Scripts/init_build_environment.sh
          sudo -E systemctl daemon-reload
          sudo -E timedatectl set-timezone "Asia/Shanghai"
#          sudo chown $USER:$GROUPS $GITHUB_WORKSPACE
#          sudo mkdir -p /mnt/build_wrt
#          sudo chown $USER:$USER /mnt/build_wrt
#          sudo ln -s /mnt/build_wrt $GITHUB_WORKSPACE/wrt

      - name: Initialization Values
        run: |
          echo "WRT_DATE=$(TZ=UTC-8 date +"%y.%m.%d-%H.%M.%S")" >> $GITHUB_ENV
          echo "WRT_MARK=$(echo $GITHUB_REPOSITORY | cut -d '/' -f 1)" >> $GITHUB_ENV
          echo "WRT_VER=$(echo $WRT_REPO | cut -d '/' -f 4)-$WRT_BRANCH" >> $GITHUB_ENV
          echo "WRT_TARGET=$(grep -m 1 -oP '^CONFIG_TARGET_\K[\w]+(?=\=y)' ./Config/$WRT_CONFIG.txt | tr '[:lower:]' '[:upper:]')" >> $GITHUB_ENV
          echo "WRT_KVER=none" >> $GITHUB_ENV
          echo "WRT_LIST=none" >> $GITHUB_ENV

          echo "WRT_CI=$WRT_CI" >> $GITHUB_ENV
          [[ -z $WRT_ARCH ]] && {
            export WRT_ARCH=$(sed -n 's/.*_DEVICE_\(.*\)_DEVICE_.*/\1/p' $GITHUB_WORKSPACE/Config/$WRT_CONFIG.txt | head -n 1)
            echo "WRT_ARCH=$WRT_ARCH" >> $GITHUB_ENV
          }
          echo "$WRT_REPO/$WRT_BRANCH" > "$GITHUB_WORKSPACE/repo_flag"
      - name: Clone Code
        run: |
          git clone --depth=1 --single-branch --branch $WRT_BRANCH $WRT_REPO ./wrt/

          cd ./wrt/ && echo "WRT_HASH=$(git log -1 --pretty=format:'%h')" >> $GITHUB_ENV

      - name: Check Scripts
        run: |
          find ./ -maxdepth 3 -type f -iregex ".*\(txt\|sh\)$" -exec dos2unix {} \; -exec chmod +x {} \;

      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ./wrt/.ccache
            ./wrt/staging_dir
          key: ${{ env.WRT_ARCH }}-${{ hashFiles('**/repo_flag') }}-${{ env.WRT_DATE }}
          restore-keys: |
            ${{ env.WRT_ARCH }}-${{ hashFiles('**/repo_flag') }}-

      - name: Refresh the cache
        run: |
          if [ -d "./wrt/staging_dir" ]; then
            find "./wrt/staging_dir" -type d -name "stamp" -not -path "*target*" | while read -r dir; do
                find "$dir" -type f -exec touch {} +
            done
          fi            

      - name: Add SmartDNS
        run: |
          chmod +x add_smartdns.sh
          ./add_smartdns.sh
          
      - name: Update Feeds
        run: |
          cd ./wrt/

          ./scripts/feeds update -a
          ./scripts/feeds install -a
      
      - name: Inspect smartdns-ui.so
        run: |
          file wrt/build_dir/target-*/smartdns-*/plugin/smartdns-ui*/target/aarch64-unknown-linux-musl/release/*.so || true

      
      - name: Fix smartdns-ui PATH and output issues
        run: |
          # 修复 PATH 被当参数的问题
          SMARTDNS_MAKEFILE=$(find wrt/feeds/packages/net/smartdns/ -name Makefile)
          
          echo "Patching Makefile: Prevent PATH=... from being passed to ld"

          # 替换 PATH=... 写法，避免传进 make 参数里
          sed -i '/Build\/Compile\/smartdns-ui/,/endef/ {
            s|PATH="\$\$(PATH):\$(CARGO_HOME)/bin"|export PATH=\$\$PATH:\$(CARGO_HOME)/bin ;|
            s|^ *make -C |$(MAKE) -C |
          }' "$SMARTDNS_MAKEFILE"

          # 同时替换掉可能输出到 smartdns-ui 目录的 -o 目标
          SMARTDNS_UI_DIR=$(find wrt/build_dir/target-* -type d -name "smartdns-ui" | head -n1)
          if [ -d "$SMARTDNS_UI_DIR" ]; then
            echo "Found smartdns-ui directory: renaming to avoid ld conflict"
            mv "$SMARTDNS_UI_DIR" "${SMARTDNS_UI_DIR}_dir"
          fi
      
      

      - name: Patch smartdns Makefile for musl Rust build
        run: |
          MAKEFILE=$(find wrt/feeds/packages/net/smartdns/ -name Makefile | head -n1)
    
          echo "Patching smartdns-ui build to use musl toolchain"
    
          sed -i '/Build\/Compile\/smartdns-ui/,/endef/ {
          s|make -C .*||g
          a \
          export PATH=\$\$PATH:\$(CARGO_HOME)/bin ; \\
          export CC=\$(TARGET_CC) ; \\
          export CXX=\$(TARGET_CXX) ; \\
          export AR=\$(TARGET_AR) ; \\
          export RUSTFLAGS="-C linker=\$(TARGET_CC)" ; \\
          cargo build --release --target aarch64-unknown-linux-musl \\
          --manifest-path=\$(PKG_BUILD_DIR)/plugin/smartdns-ui/Cargo.toml
          }' "$MAKEFILE"

      - name: Fix install path for smartdns-ui .so
        run: |
          MAKEFILE=$(find wrt/feeds/packages/net/smartdns/ -name Makefile | head -n1)

          sed -i 's|plugin/smartdns-ui/target/smartdns_ui.so|plugin/smartdns-ui/target/aarch64-unknown-linux-musl/release/libsmartdns_ui.so|g' "$MAKEFILE"


      - name: Custom Packages
        run: |
          cd ./wrt/package/

          $GITHUB_WORKSPACE/Scripts/Packages.sh
          $GITHUB_WORKSPACE/Scripts/Handles.sh

      - name: Custom Settings
        run: |
          . $GITHUB_WORKSPACE/Scripts/function.sh
          cd ./wrt/
          
          generate_config && cat .config
          
          $GITHUB_WORKSPACE/Scripts/Settings.sh

          make defconfig -j$(nproc) && make clean -j$(nproc)

      - name: Download Packages
        if: env.WRT_TEST != 'true'
        run: |
          cd ./wrt/

          make download -j$(nproc)

      - name: Compile Firmware
        if: env.WRT_TEST != 'true'
        run: |
          cd ./wrt/

          make -j$(nproc) || make -j1 V=s

      - name: Delete Old Cache
        run: |
          # 获取缓存列表并删除
          gh cache list --key ${{ env.WRT_ARCH }}-${{ hashFiles('**/repo_flag') }}- --json key --jq '.[] | .key' | while read -r key; do
            gh cache delete "$key"
          done
          # 输出缓存状态
          echo "========cache status========"
          echo "ccache: $(du -sh ./wrt/.ccache | cut -f 1)"
          echo "staging: $(du -sh ./wrt/staging_dir | cut -f 1)"

      - name: Machine Information
        run: |
          cd ./wrt/

          echo "======================="
          lscpu | grep -E "name|Core|Thread"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1
          echo "======================="

      - name: Package Firmware
        run: |
          cd ./wrt/ && mkdir ./upload/

          cp -f ./.config ./upload/Config-"$WRT_CONFIG"-"$WRT_VER"-"$WRT_DATE".txt

          if [[ $WRT_TEST != 'true' ]]; then
            echo "WRT_KVER=$(find ./bin/targets/ -type f -name "*.manifest" -exec grep -oP '^kernel - \K[\d\.]+' {} \;)" >> $GITHUB_ENV
            echo "WRT_LIST=$(find ./bin/targets/ -type f -name "*.manifest" -exec grep -oP '^luci-(app|theme)[^ ]*' {} \; | tr '\n' ' ')" >> $GITHUB_ENV

            find ./bin/targets/ -iregex ".*\(buildinfo\|json\|sha256sums\|packages\)$" -exec rm -rf {} +

            for FILE in $(find ./bin/targets/ -type f -iname "*$WRT_TARGET*") ; do
              EXT=$(basename $FILE | cut -d '.' -f 2-)
              NAME=$(basename $FILE | cut -d '.' -f 1 | grep -io "\($WRT_TARGET\).*")
              NEW_FILE="$WRT_VER"-"$NAME"-"$WRT_DATE"."$EXT"
              mv -f $FILE ./upload/$NEW_FILE
            done

            find ./bin/targets/ -type f -exec mv -f {} ./upload/ \;

            make clean -j$(nproc)
          fi

      - name: Release Firmware
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{env.CI_NAME}}-${{env.WRT_CONFIG}}_${{env.WRT_DATE}}
          files: ./wrt/upload/*.*
          body: |
            这是个平台固件包，内含多个设备！
            请注意选择你需要的设备固件！
            不要问，刷就完事了！

            全系带开源硬件加速，别问了！

            源码：${{env.WRT_REPO}}
            分支：${{env.WRT_BRANCH}}
            提交：${{env.WRT_HASH}}

            配置：${{env.WRT_CONFIG}}
            平台：${{env.WRT_TARGET}}

            登录地址：${{env.WRT_IP}}
            登录密码：${{env.WRT_PW}}

            WIFI名称：${{env.WRT_SSID}}
            WIFI密码：${{env.WRT_WORD}}

            内核版本：${{env.WRT_KVER}}
            插件列表：${{env.WRT_LIST}}
